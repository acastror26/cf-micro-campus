"""Initial user

Revision ID: 5561c6152eb0
Revises: 
Create Date: 2024-07-23 05:00:39.985555

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session
import os

from src.core.models import User
from src.api.endpoints.crud import get_password_hash


# revision identifiers, used by Alembic.
revision: str = '5561c6152eb0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)
    inspector = sa.inspect(bind)
    if 'users' not in inspector.get_table_names():
        # Create the table if it doesn't exist
        op.create_table(
            'users',
            sa.Column('id', sa.Integer, primary_key=True, index=True),
            sa.Column('first_name', sa.String, index=True),
            sa.Column('last_name', sa.String, index=True),
            sa.Column('email', sa.String, unique=True, index=True),
            sa.Column('phone_number', sa.String),
            sa.Column('country', sa.String),
            sa.Column('state', sa.String),
            sa.Column('city', sa.String),
            sa.Column('is_active', sa.Boolean, default=True),
            sa.Column('is_m2m_account', sa.Boolean, default=False),
            sa.Column('hashed_password', sa.String),
        )

    # Insert initial user data
    email = os.getenv('RESERVATION_SERVICE_CLIENT_ID', 'default-email@example.com')
    password = os.getenv('RESERVATION_SERVICE_CLIENT_SECRET', 'default-password')

    new_user = User(
        first_name="Reservation Service",
        last_name="Client",
        is_active=True,
        is_m2m_account=True,
        email=email,
        hashed_password=get_password_hash(password)
    )
    session.add(new_user)

    # Adding user 2
    user2 = User(
        first_name="Test",
        last_name="User 1",
        is_active=True,
        is_m2m_account=False,
        email='test-user-1@test.com',
        hashed_password=get_password_hash("1234")
    )
    session.add(user2)

    session.commit()


def downgrade() -> None:
    # Delete the users
    bind = op.get_bind()
    session = Session(bind=bind)
    email = os.getenv('RESERVATION_SERVICE_CLIENT_ID', 'default-email@example.com')
    user = session.query(User).filter_by(email=email).first()
    if user:
        session.delete(user)

    user2 = session.query(User).filter_by(email='test-user-1@test.com').first()
    if user2:
        session.delete(user2)

    session.commit()

    # Drop the table if it exists
    if 'users' in sa.inspect(bind).get_table_names():
        op.drop_table('users')